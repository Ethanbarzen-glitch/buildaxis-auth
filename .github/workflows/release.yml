name: release
on:
  push:
    tags: ['v*.*.*']
  workflow_dispatch:

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: true

jobs:
  publish:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    strategy:
      fail-fast: false
      matrix:
        service: [api, projects, teams]

    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & push (multi-arch)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./services/${{ matrix.service }}/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          # keep these false; we'll attach attestations explicitly
          provenance: false
          sbom: false
          tags: ghcr.io/${{ github.repository_owner }}/buildaxis-auth-${{ matrix.service }}:${{ github.ref_name }}

      - name: Install cosign
        uses: sigstore/cosign-installer@v3.4.0

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Sign image index (keyless)
        env:
          COSIGN_YES: "true"
        run: |
          IMAGE="ghcr.io/${{ github.repository_owner }}/buildaxis-auth-${{ matrix.service }}:${{ github.ref_name }}"
          cosign sign "$IMAGE"

      - name: Attach SBOM attestations (per-arch)
        env:
          COSIGN_YES: "true"
        run: |
          set -euo pipefail
          IMAGE="ghcr.io/${{ github.repository_owner }}/buildaxis-auth-${{ matrix.service }}:${{ github.ref_name }}"
          docker buildx imagetools inspect "$IMAGE" -v > manifest.json

          for arch in amd64 arm64; do
            DIGEST=$(jq -r --arg a "$arch" '.manifests[] | select(.platform.os=="linux" and .platform.architecture==$a) | .digest' manifest.json)
            REF="${IMAGE%@*}@${DIGEST}"
            echo "Generating SBOM for $REF ($arch)"

            # Generate SPDX JSON with Syft
            docker run --rm anchore/syft:latest "$REF" -o spdx-json > sbom.json

            # Attach as Cosign attestation (predicate type spdxjson)
            cosign attest --type spdxjson --predicate sbom.json "$REF"
          done
